###################################################
### Chapter 4: Modules and program organization ###
###################################################

# Note: to obtain the most information from this section its best to work through the example then reference the notes that are present here.
# Note: (cont): Most of this chapter are code examples. As such it would be best to re-read the chapter or go back through the examples.


### Page 93-94, 4.1 Basics of module creation and use ###

# When you write a class, you then create instances of the class.
# Those instances can execute the class's instance method. In contrast, modules don't have instances.
# Instead modules get mixed in to classes, using either included method or prepend method.
# A module "mixed in" in this manner is sometimes referred to as a "mix-in" The result of mixing in a module is that instances of the class have access to the instance methods defined in the module.

# Example:

class MyFirstModule
  def say_hello
    puts "Hello!"
  end
end

class ModuleTester
  include MyFirstModule
end

mt = ModuleTester.new
mt.say_hello

# The main difference between inheriting from a class and mixing in a module is that you can mix in more than one module.
# No class can inherit from more than one class
# In cases where you want numerous extra behaviors for a class's instances-and you don't want to stash them all in class's superclass and its ancestral classes-you can use modules to organize your code in a more granular way.

### Illustrating the basics of method lookup ###

# Module prepended to its class, in reverse order for prepending
# Its class
# Modules included in its class, in reverse order of inclusion
# Modules prepended to its superclass
# Its class's superclass
# Modules included in its super class
# Likewise, up to Object (and its mix-in Kernel) and BasicObject

# This chain continues all the way up to BasicObject

### How prepend works ###
# The difference is that if you prepend a module to a class, the object looks in that module first, before in the class.

# The way super handles arguments is as follows:
# Called with no argument list (empty or otherwise), super automatically forwards the arguments that were passed to the method from which it's called.
# Called with an empty argument list-super()-super sends no arguments to the higher-up method, even if arguments were passed to the current method.
# Called with specific arguments-super(a, b, c)-super sends exactly those arguments