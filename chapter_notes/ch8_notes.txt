#############################################################
### Chapter 8: Strings, symbols, and other scalar objects ###
#############################################################

### Page 223, "HERE" DOCUMENTS ###

# A "here" document, or here-doc, is a string usually a muultiline string, that often takes the form of a template or a set of data lines.

# Example:
# >> text = << EOM
This is the first line of text.
This is the second line.
Now we're done.
EOM

=> "This is the first line of text.\nThisis the second line.\nNow we're done.\n"

# It is not required for EOM to be the last item on the line as it effective serves as a placeholder

# Example:

>>a = <<EOM.to_i * 10
5
EOM
puts a
=> 50

# It can also be used in arrays

>>array = [1, 2, 3, << EOM, 4]
This is the here-doc!
It becomes array[3]
EOM
p array
=> [1, 2, 3, "This is the here-doc!\nIt becomes array[3].\n, 4]"

### Page 224, 8.1.2 Basic string manipulation ###

# Examples of Getting and Setting substrings

>> string = "Ruby is a cool language"
=> "Ruby is a cool language"

#5th character in the string
>> string[5]
=> "i"

# Return the 12th character in the string counting from right to left
>> string[-12]
=> "o"

# Starting from the 5th character from left to right and counting up to the 10th character (including spaces)
# 5 position shifts
>> string[5,10]
=> "is a cool "

# Starting from the 7th character from left to right and counting up to the 14th character (including spaces)
# 7 position shifts
>> string[7..14]
=> " a cool "

# Starting from the 12th character from the right to left and counting up to the 3rd character (including spaces)
# 10 position shifts
>> string[-12..-3]
=> "ol languag"

# Starting from the 12th character from the right to left and counting up to the 20th character (including spaces)
# 8 position shifts
>> string[-12..20]
=> "ol langua"

# Staring from the 1st character from right to left and counting up to the 15th character (include spaces)
# 9 position shifts
>>string[15..-1]
=> "language."

# Search the string for the text 'very cool lang'
>>string["very cool lang"]
=> nil

# Its also possible to obtain a patterns as well (more in Chapter 11)
>>string[/c[ol ]+/]
=> "cool l"

# Other keywords that can be used for string manipulations
# 'string.slice' or 'string.slice!' removes the subset of the string specified (the '!' version modifying the existing string)

# Substrings can also be replaced with a bracket argument and the replacement text. It can also work with negative number as well.
# Example:
>> string["cool"] = "great"
=> "great"
>> string
=> "Ruby is a great language."


### Page 228, 8.1.3 Querying strings ##

# Examples of boolean string queries
# .include?, .start_with?, .end_with?, .empty?

# Examples of content queries
# .size, .count (can utilize regex), .index, .rindex, .ord (ordinal), .chr (returns character associated to ordinal)

### Page 231, 8.1.5 String transformation ###
# .rjust, .ljust, .center, .chomp (or .chop), .clear, .delete
# Note: There is no bang version for .clear and .delete as its pretty

### Page 241, 8.2.3 Symbols in practice: Symbols as hash keys ###

# Example:

>> d_hash = { :name => "David", :age => 55 }
=> {:name => "David", :age => 55}
>> d_hash[:age]
=> 55
>> d_hash[:name]
=> "David"

# Many of the string manipulation commands can also be used for symbols.

### Page 246 8.4.1 Instantiating date/time objects - Creating time objects ##

# Ruby has two different time based objects.  Time (child of Object) and DateTime (a subclass of Date {child of Object})
# There are minor difference between Time and DateTime one noteable one that Datetime class seconds by using .second and time calls seconds by using .sec

# Common date and time formatters can be found on page 250

## Date/time conversion methods ##

# Example of Date being passed to a block of code
>>require 'date'
=> true
>> d = Date.today
=> #<Date: 2017-10-26 ((2458053j,0s,0n),+0s,2299161j)>
>> next_week = d + 7
=> #<Date: 2017-11-02 ((2458060j,0s,0n),+0s,2299161j)>
>>d.upto(next_week) {|date| puts "#{date} is a #{date.strftime("%A")}"}
2017-10-26 is a Thursday
2017-10-27 is a Friday
2017-10-28 is a Saturday
2017-10-29 is a Sunday
2017-10-30 is a Monday
2017-10-31 is a Tuesday
2017-11-01 is a Wednesday
2017-11-02 is a Thursday
=> #<Date: 2017-10-26 ((2458053j,0s,0n),+0s,2299161j)>